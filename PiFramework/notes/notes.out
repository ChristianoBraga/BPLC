\BOOKMARK [0][-]{chapter.1}{Introduction}{}% 1
\BOOKMARK [0][-]{chapter.2}{Preliminaries}{}% 2
\BOOKMARK [1][-]{section.2.1}{Tree automata}{chapter.2}% 3
\BOOKMARK [1][-]{section.2.2}{Transition systems, structural operational semantics and model checking}{chapter.2}% 4
\BOOKMARK [1][-]{section.2.3}{Maude}{chapter.2}% 5
\BOOKMARK [2][-]{subsection.2.3.1}{Maude as a meta-tool}{section.2.3}% 6
\BOOKMARK [2][-]{subsection.2.3.2}{Writing a compiler in Maude}{section.2.3}% 7
\BOOKMARK [0][-]{chapter.3}{ Automata}{}% 8
\BOOKMARK [1][-]{section.3.1}{Interpreting automata}{chapter.3}% 9
\BOOKMARK [1][-]{section.3.2}{ Automata}{chapter.3}% 10
\BOOKMARK [1][-]{section.3.3}{ Automata and Term Rewriting}{chapter.3}% 11
\BOOKMARK [2][-]{subsection.3.3.1}{ Automata in Maude}{section.3.3}% 12
\BOOKMARK [1][-]{section.3.4}{Model checking \040Automata}{chapter.3}% 13
\BOOKMARK [0][-]{chapter.4}{ lib: Basic Programming Language Constructs}{}% 14
\BOOKMARK [1][-]{section.4.1}{ lib signature}{chapter.4}% 15
\BOOKMARK [1][-]{section.4.2}{ lib signature in Maude}{chapter.4}% 16
\BOOKMARK [1][-]{section.4.3}{ Automata transitions for \040lib dynamic semantics in Maude}{chapter.4}% 17
\BOOKMARK [0][-]{chapter.5}{2: \040Framework in Python}{}% 18
\BOOKMARK [1][-]{section.5.1}{ lib Expressions}{chapter.5}% 19
\BOOKMARK [2][-]{subsection.5.1.1}{Grammar for \040lib Expressions}{section.5.1}% 20
\BOOKMARK [2][-]{subsection.5.1.2}{ lib Expressions in Python}{section.5.1}% 21
\BOOKMARK [2][-]{subsection.5.1.3}{ Automaton for \040lib Expressions}{section.5.1}% 22
\BOOKMARK [2][-]{subsection.5.1.4}{The complete \040Automaton for \040lib Expressions in Python}{section.5.1}% 23
\BOOKMARK [1][-]{section.5.2}{ lib Commands}{chapter.5}% 24
\BOOKMARK [2][-]{subsection.5.2.1}{Grammar for \040lib Commands}{section.5.2}% 25
\BOOKMARK [2][-]{subsection.5.2.2}{Grammar for \040lib Commands in Python}{section.5.2}% 26
\BOOKMARK [2][-]{subsection.5.2.3}{Complete \040Automaton for Commands in Python}{section.5.2}% 27
\BOOKMARK [2][-]{subsection.5.2.4}{ lib Declarations}{section.5.2}% 28
\BOOKMARK [2][-]{subsection.5.2.5}{Grammar for \040lib Declarations}{section.5.2}% 29
\BOOKMARK [2][-]{subsection.5.2.6}{Grammar for \040lib Declarations in Python}{section.5.2}% 30
\BOOKMARK [2][-]{subsection.5.2.7}{Complete \040Automaton for \040lib Declarations in Python}{section.5.2}% 31
\BOOKMARK [0][-]{chapter.6}{A \040compiler for Imp in Maude}{}% 32
\BOOKMARK [1][-]{section.6.1}{IMP syntax}{chapter.6}% 33
\BOOKMARK [1][-]{section.6.2}{Imp's command-line interface}{chapter.6}% 34
\BOOKMARK [1][-]{section.6.3}{Imp parser}{chapter.6}% 35
\BOOKMARK [1][-]{section.6.4}{Imp to \040lib transformer}{chapter.6}% 36
\BOOKMARK [1][-]{section.6.5}{Complete IMP compiler in Maude}{chapter.6}% 37
\BOOKMARK [2][-]{subsection.6.5.1}{Parser}{section.6.5}% 38
\BOOKMARK [2][-]{subsection.6.5.2}{Compiling to \040lib}{section.6.5}% 39
\BOOKMARK [2][-]{subsection.6.5.3}{Pretty-printing IMP programs, their execution and model checking results}{section.6.5}% 40
\BOOKMARK [2][-]{subsection.6.5.4}{IMP command line interface}{section.6.5}% 41
\BOOKMARK [0][-]{chapter.7}{A \040compiler for the Abstract Machine Notation in Maude}{}% 42
\BOOKMARK [1][-]{section.7.1}{Preliminaries}{chapter.7}% 43
\BOOKMARK [2][-]{subsection.7.1.1}{Abstract Machine Notation grammar and example}{section.7.1}% 44
\BOOKMARK [2][-]{subsection.7.1.2}{The MUTEX machine.}{section.7.1}% 45
\BOOKMARK [1][-]{section.7.2}{ denotations for the Abstract Machine Notation}{chapter.7}% 46
\BOOKMARK [1][-]{section.7.3}{B Maude}{chapter.7}% 47
\BOOKMARK [2][-]{subsection.7.3.1}{Searching the computation graph of a GSL substitution}{section.7.3}% 48
\BOOKMARK [2][-]{subsection.7.3.2}{Linear Temporal Logic model checking AMN Machines}{section.7.3}% 49
\BOOKMARK [1][-]{section.7.4}{Related work}{chapter.7}% 50
\BOOKMARK [0][-]{chapter.8}{Related work}{}% 51
\BOOKMARK [0][-]{chapter.9}{Conclusion}{}% 52
