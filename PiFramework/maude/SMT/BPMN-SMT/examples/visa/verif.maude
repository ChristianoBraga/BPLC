---- Symbolic Formal Modelling and Analysis of BPMN using Maude+CVC4
---- authors: Francisco Duran, Gwen Salaun, Camilo Rocha
---- file: verif.maude
----
---- This file contains operations for the automated symbolic analysis
---- of BPMN processes

load ../../bpmn.maude
load visa.maude

red in STRING : "visa.maude" .

mod VERIF is
  pr BPMN-EX .

  op p : -> PId .
  op s : -> SId .

  var  PId : PId .
  var  SId : SId .
  vars Atts Atts1 : AttributeSet .
  vars T T1 : Time .
  var  Tk : Message .
  var  Tks : Set{Message} .
  var  Conf : Configuration .
  var  Nodes : Set{Node} .
  var  B : Boolean .
  vars I J : Integer .
  ---- arguments to the process
  var  OK         : Boolean . 
  vars TRY FSIZE  : Integer .
  var  QUAL       : Real .
  
 ----- tick rule
 crl [tick] :
      < PId : Process | nodes : Nodes, Atts >
      < SId : Simulation |
           tokens : Tks,
           gtime : T,
           Atts1 >
    =>
      < PId : Process | nodes : Nodes, Atts >
      < SId : Simulation |
           tokens : delta(Tks, T1),
           gtime : (T + T1),
           Atts1 >
    if T1 := mte(Nodes, Tks) /\ T1 =/= 0  ---- /\   not(allTokensToZero(Tks))
    [print "tick " T] .

  ---- operations for retrieving specific objects from a system (useful for verification purposes)
  op getTime : Configuration ~> Time .
  eq getTime(< SId : Simulation | gtime : T, Atts > Conf) = T .

  op initSystem : Boolean Integer Integer Real -> Configuration .
  eq initSystem(OK, TRY, FSIZE, QUAL) = < p : Process    | nodes  : nds(OK, TRY, FSIZE, QUAL), flows : fls >
                                       < s : Simulation | tokens : init, gtime : 0,
                                                         constr : true,
                                                         varidx : (v(OK) |-> 0, v(TRY) |-> 0, v(FSIZE) |-> 0, v(QUAL) |-> 0) > .

  --- retrieves the number of token in a system
  op getNumberTokens : Configuration ~> Nat .
  op getNumberTokens : Set{Message} ~> Nat .

  eq getNumberTokens(< SId : Simulation | tokens : Tks, Atts > Conf) = getNumberTokens(Tks) .
  eq getNumberTokens(empty) = 0 .
  eq getNumberTokens((Tk, Tks)) = 1 + getNumberTokens(Tks) .
endm

search initSystem(OK:Boolean, TRY:Integer, FSIZE:Integer, QUAL:Real) =>! Conf:Configuration .

eof

search initSystem(EL:Integer,BU:Integer,ST:Integer,RO:Integer,AD:Integer) =>* Conf:Configuration < s : Simulation | tokens : (Tks:Set{Message}, token(t6,T:Time)) , Atts:AttributeSet > .

search initSystem(EL:Integer,BU:Integer,ST:Integer,RO:Integer,AD:Integer) =>! Conf:Configuration < s : Simulation | tokens : Tks:Set{Message} , Atts:AttributeSet > such that Tks:Set{Message} =/= empty .
