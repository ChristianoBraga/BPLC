--- A simple mutual exclusion protocol with safety and liveness.
(module Mutex
  var p1 , p2
  const idle , wait , crit
  init
    p1 = 0 , p2 = 0 ,
    idle = 0 , wait = 1 , crit = 2
  proc mutex {
      while (true) do
      {
          if(p1 == idle /\ p2 == idle) { p1 := wait | p2 := wait }
          else if (p1 == idle /\ p2 == wait) {
              p2 := crit | (p1 := wait ; p2 := crit)
          }
	  else if (p1 == idle /\ p2 == crit) {
              p1 := wait | p2 := idle 
          } 
	  else if (p1 == wait /\ p2 == idle) {
              p1 := crit | (p1 := crit ; p2 := wait) 
          }
	  else if (p1 == wait /\ p2 == crit) { 
              p2 := idle
          }
	  else if (p1 == crit /\ p2 == idle) { 
              p1 := idle | p2 := wait 
          } 
	  else if (p1 == crit /\ p2 == wait) { 
              p1 := idle
          } 
          else nop
      }	  
  }
end)

(view)

set show loop stats on .
set show loop timing on .

--- Safety
(mc mutex() |= [] ~(p1(2) /\ p2(2)))

--- Liveness
(mc mutex() |= [] (p1(1) -> <> p1(2)))

--- Strong liveness
(mc mutex() |= ([]<> p1(1)) -> ([]<> p1(2)))
