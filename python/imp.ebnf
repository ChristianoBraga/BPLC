@@grammar::IMP
@@eol_comments :: /#.*?$/

start =  @:cmd $ ;

cmd = nop | assign | loop | call | cond | let ;

call = i:identifier '(' { a:actual }* ')' ;

actual = e1:expression { ',' e2:expression }* | {} ;

nop = 'nop' ;

loop = op:'while' ~ e:expression 'do' { c:cmd }+ ;

cond = op:'if' ~ e:expression 'then' { c1:cmd }+ 'else' { c2:cmd }+ ;

assign = id:identifier op:':=' ~ e:expression ;

let = op:'let' ~ d:dec 'in' { c:cmd }+ ; 

dec = var | fn ;
    
var = op:'var' ~ id:identifier '=' e:expression ;

fn = op:'fn' ~ id:identifier '(' f:formal ')' '=' c:cmd ;

formal = i1:identifier { ',' i2:identifier }* | {} ;

expression = @:bool_expression | @:arith_expression ;

bool_expression =  negation | equality | conjunction | disjunction 
                | lowereq | greatereq | lowerthan | greaterthan | par_bool_expression ;

equality = left:expression op:"==" right:expression ;

conjunction = left:bool_expression op:"and" ~ right:bool_expression ;

disjunction = left:bool_expression op:"or" ~ right:bool_expression ;

lowereq = left:arith_expression op:"<=" ~ right:arith_expression ;

greatereq = left:arith_expression op:">=" ~ right:arith_expression ;

lowerthan = left:arith_expression op:"<" ~ right:arith_expression ;

greaterthan = left:arith_expression op:">" ~ right:arith_expression ;

par_bool_expression = '(' @:bool_expression ')' | truth ;

arith_expression = addition | subtraction | term ;

negation = op:'not' ~ b:bool_expression ;

addition = left:arith_expression op:"+" ~ right:term ;

subtraction = left:arith_expression op:"-" ~ right:term ;

term = multiplication | division | factor ;

multiplication = left:term op:"*" ~ right:factor ;

division = left:term op:"/" ~ right:factor ;

factor = '(' ~ @:expression ')' | number ;

number = /\d+/ ;

identifier = /(?!\d)\w+/ ;

truth = 'True' | 'False' ;
